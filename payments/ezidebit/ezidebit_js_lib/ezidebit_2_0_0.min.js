var eziDebit = function() {
    var f;
    var b = "2.0.0";
    var c = {};
    var e;
    var a = {};
    var d = "";
    setValidated = function(g) {
        d = g
    };
    init = function(i, h, g) {
        e = i;
        f = g;
        if (h) {
            mergeFields(c, h);
            initialiseFields();
            initialiseButton()
        }
    }, initialiseFields = function() {
        if ("customerLastName" in c) {
            a.customerLastName = getElement(c.customerLastName)
        }
        if ("customerRef" in c) {
            a.customerRef = getElement(c.customerRef)
        }
        if ("customerFirstName" in c) {
            a.customerFirstName = getElement(c.customerFirstName)
        }
        if ("customerAddress1" in c) {
            a.customerAddress1 = getElement(c.customerAddress1)
        }
        if ("customerMobile" in c) {
            a.customerMobile = getElement(c.customerMobile)
        }
        if ("customerAddress2" in c) {
            a.customerAddress2 = getElement(c.customerAddress2)
        }
        if ("customerSuburb" in c) {
            a.customerSuburb = getElement(c.customerSuburb)
        }
        if ("customerState" in c) {
            a.customerState = getElement(c.customerState)
        }
        if ("customerPostcode" in c) {
            a.customerPostcode = getElement(c.customerPostcode)
        }
        if ("customerEmail" in c) {
            a.customerEmail = getElement(c.customerEmail)
        }
        if ("customerReference" in c) {
            a.customerReference = getElement(c.customerReference)
        }
        if ("nameOnCard" in c) {
            a.nameOnCard = getElement(c.nameOnCard);
            a.nameOnCard.removeAttribute("name")
        }
        if ("cardNumber" in c) {
            a.cardNumber = getElement(c.cardNumber);
            a.cardNumber.removeAttribute("name")
        }
        if ("cardExpiryMonth" in c) {
            a.cardExpiryMonth = getElement(c.cardExpiryMonth);
            a.cardExpiryMonth.removeAttribute("name")
        }
        if ("cardExpiryYear" in c) {
            a.cardExpiryYear = getElement(c.cardExpiryYear);
            a.cardExpiryYear.removeAttribute("name")
        }
        if ("cardCCV" in c) {
            a.cardCCV = getElement(c.cardCCV);
            a.cardCCV.removeAttribute("name")
        }
        if ("paymentAmount" in c) {
            a.paymentAmount = getElement(c.paymentAmount)
        }
        if ("paymentReference" in c) {
            a.paymentReference = getElement(c.paymentReference)
        }
        if ("accountName" in c) {
            a.accountName = getElement(c.accountName)
        }
        if ("accountBSB" in c) {
            a.accountBSB = getElement(c.accountBSB)
        }
        if ("accountNumber" in c) {
            a.accountNumber = getElement(c.accountNumber)
        }
        if ("submitButton" in c) {
            a.submitButton = getElement(c.submitButton)
        }
        if ("submitAction" in c) {
            switch (c.submitAction) {
                case "ChargeCard":
                    if ("customerDetailsDiv" in c) {
                        var g = document.getElementById(c.customerDetailsDiv);
                        g.style.display = "none"
                    }
                    break
            }
        }
    }, getElement = function(g) {
        if (typeof g == "string" || g instanceof String) {
            return document.getElementById(g)
        } else {
            return g
        }
    }, mergeFields = function(g) {
        for (var j = 1; j < arguments.length; j++) {
            for (var h in arguments[j]) {
                g[h] = arguments[j][h]
            }
        }
        return g
    }, initialiseButton = function() {
        if (a.submitButton) {
            a.submitButton.onclick = function() {
                a.submitButton.setAttribute("disabled", "disabled");
                processTransaction(c.submitAction);
                return false
            }
        }
    }, processTransaction = function(g) {
        if (!e) {
            eziDebitErrorMessages.generateError("No public key has been specified", c.submitError);
            return
        }
        JSONP.get(f + "/TestPublicKey", {
            PublicKey: e
        }, function(h) {
            if (!h || h.Error > 0) {
                eziDebitErrorMessages.generateError("No valid public key has been specified", c.submitError)
            } else {
                eziDebitValidation.validate(g, c);
                if (d == true) {
                    switch (g) {
                        case "ChargeCard":
                            chargeCard();
                            break;
                        case "SaveCustomer":
                            saveCustomer();
                            break;
                        case "SaveCustomerAccount":
                            saveCustomerAccount();
                            break;
                        case "ChangeCustomerPaymentInfo":
                            changeCustomerPaymentInfo();
                            break
                    }
                } else {
                    a.submitButton.removeAttribute("disabled");
                    return false
                }
            }
        }, jsonFailure)
    }, jsonFailure = function() {
        eziDebitErrorMessages.generateError("An error has occurred attempting to contact the API. Please contact Ezidebit support.", c.submitError)
    }, chargeCard = function(g) {
        if (g !== undefined) {
            c = g;
            c.submitAction = "ChargeCard";
            initialiseFields();
            eziDebitValidation.validate("ChargeCard", c);
            if (d == false) {
                return false
            }
        }
        JSONP.get(f + "/ChargeCard", {
            PublicKey: e,
            CreditCardExpiryMonth: a.cardExpiryMonth.value,
            CreditCardNumber: a.cardNumber.value,
            CreditCardExpiryYear: a.cardExpiryYear.value,
            CreditCardCCV: a.cardCCV.value,
            NameOnCreditCard: a.nameOnCard.value,
            PaymentAmountInCents: (Math.round(a.paymentAmount.value * 100)),
            CustomerName: a.nameOnCard.value,
            PaymentReference: a.paymentReference.value,
            ReferrerURL: location.href,
            UserAgent: navigator.userAgent,
            Version: b
        }, function(h) {
            if (!h || h.Error > 0) {
                if ("submitButton" in a) {
                    a.submitButton.removeAttribute("disabled")
                }
                eziDebitErrorMessages.generateError("Ezidebit API Error (" + h.Error + "): " + h.ErrorMessage, c.submitError)
            } else {
                if (c.submitCallback) {
                    if (a.exchangePaymentID) {
                        a.exchangePaymentID.value = h.Data.ExchangePaymentID
                    }
                    if (h.Data.PaymentResult == "F" && a.submitButton) {
                        a.submitButton.removeAttribute("disabled")
                    }
                    c.submitCallback(h.Data)
                }
            }
        }, jsonFailure)
    }, changeCustomerPaymentInfo = function(g) {
        if (g !== undefined) {
            c = g;
            c.submitAction = "ChangeCustomerPaymentInfo";
            initialiseFields();
            eziDebitValidation.validate("ChangeCustomerPaymentInfo", c);
            if (d == false) {
                return false
            }
        }
        JSONP.get(f + "/ChangeCustomerPaymentInfo", {
            PublicKey: e,
            EzidebitCustomerRef: a.customerRef ? a.customerRef.value : "",
            YourSystemReference: a.customerReference ? a.customerReference.value : "",
            CreditCardNumber: a.cardNumber ? a.cardNumber.value : "",
            CreditCardExpiryMonth: a.cardExpiryMonth ? a.cardExpiryMonth.value : "",
            CreditCardExpiryYear: a.cardExpiryYear ? a.cardExpiryYear.value : "",
            NameOnCreditCard: a.nameOnCard ? a.nameOnCard.value : "",
            AccountName: a.accountName ? a.accountName.value : "",
            AccountBSB: a.accountBSB ? a.accountBSB.value : "",
            AccountNumber: a.accountNumber ? a.accountNumber.value : ""
        }, function(h) {
            if ("submitButton" in a) {
                a.submitButton.removeAttribute("disabled")
            }
            if (!h || h.Error > 0) {
                eziDebitErrorMessages.generateError("Ezidebit API Error (" + h.Error + "): " + h.ErrorMessage, c.submitError)
            } else {
                if (c.submitCallback) {
                    c.submitCallback(h)
                }
            }
        }, jsonFailure)
    }, saveCustomerAccount = function(g) {
        if (g !== undefined) {
            c = g;
            c.submitAction = "SaveCustomerAccount";
            initialiseFields();
            eziDebitValidation.validate("SaveCustomerAccount", c);
            if (d == false) {
                return false
            }
        }
        JSONP.get(f + "/AddCustomer", {
            PublicKey: e,
            YourSystemReference: a.customerReference ? a.customerReference.value : "",
            YourGeneralReference: "",
            LastName: a.customerLastName.value,
            FirstName: a.customerFirstName ? a.customerFirstName.value : "",
            AddressLine1: a.customerAddress1 ? a.customerAddress1.value : "",
            AddressLine2: a.customerAddress2 ? a.customerAddress2.value : "",
            AddressSuburb: a.customerSuburb ? a.customerSuburb.value : "",
            AddressState: a.customerState ? a.customerState.value : "",
            AddressPostCode: a.customerPostcode ? a.customerPostcode.value : "",
            EmailAddress: a.customerEmail ? a.customerEmail.value : "",
            MobilePhoneNumber: a.customerMobile ? a.customerMobile.value : "",
            ContractStartDate: new Date().toDateString(),
            SmsPaymentReminder: "N",
            SmsFailedNotification: "N",
            SmsExpiredCard: "N",
            Username: "",
            CreditCardNumber: "",
            CreditCardExpiryMonth: "",
            CreditCardExpiryYear: "",
            CreditCardCCV: "",
            NameOnCreditCard: "",
            PaymentAmount: "0",
            PaymentReference: a.paymentReference ? a.paymentReference.value : "",
            AccountName: a.accountName ? a.accountName.value : "",
            AccountBSB: a.accountBSB ? a.accountBSB.value : "",
            AccountNumber: a.accountNumber ? a.accountNumber.value : "",
            ReferrerURL: location.href,
            UserAgent: navigator.userAgent,
            Version: b
        }, function(h) {
            if ("submitButton" in a) {
                a.submitButton.removeAttribute("disabled")
            }
            if (!h || h.Error > 0) {
                eziDebitErrorMessages.generateError("Ezidebit API Error (" + h.Error + "): " + h.ErrorMessage, c.submitError)
            } else {
                if (c.submitCallback) {
                    c.submitCallback(h)
                }
            }
        }, jsonFailure)
    }, saveCustomer = function(g) {
        var h = "";
        if (g !== undefined) {
            c = g;
            c.submitAction = "SaveCustomer";
            initialiseFields();
            eziDebitValidation.validate("SaveCustomer", c);
            if (d == false) {
                return false
            }
        }
        JSONP.get(f + "/AddCustomer", {
            PublicKey: e,
            YourSystemReference: a.customerReference ? a.customerReference.value : "",
            YourGeneralReference: "",
            LastName: a.customerLastName.value,
            FirstName: a.customerFirstName ? a.customerFirstName.value : "",
            AddressLine1: a.customerAddress1 ? a.customerAddress1.value : "",
            AddressLine2: a.customerAddress2 ? a.customerAddress2.value : "",
            AddressSuburb: a.customerSuburb ? a.customerSuburb.value : "",
            AddressState: a.customerState ? a.customerState.value : "",
            AddressPostCode: a.customerPostcode ? a.customerPostcode.value : "",
            EmailAddress: a.customerEmail ? a.customerEmail.value : "",
            MobilePhoneNumber: a.customerMobile ? a.customerMobile.value : "",
            ContractStartDate: new Date().toDateString(),
            SmsPaymentReminder: "N",
            SmsFailedNotification: "N",
            SmsExpiredCard: "N",
            Username: "",
            CreditCardNumber: a.cardNumber ? a.cardNumber.value : "",
            CreditCardExpiryMonth: a.cardExpiryMonth ? a.cardExpiryMonth.value : "",
            CreditCardExpiryYear: a.cardExpiryYear ? a.cardExpiryYear.value : "",
            CreditCardCCV: a.cardCCV ? a.cardCCV.value : "",
            NameOnCreditCard: a.nameOnCard ? a.nameOnCard.value : "",
            PaymentAmount: a.paymentAmount ? (Math.round(a.paymentAmount.value * 100)) : "0",
            PaymentReference: a.paymentReference ? a.paymentReference.value : "",
            AccountName: a.accountName ? a.accountName.value : "",
            AccountBSB: a.accountBSB ? a.accountBSB.value : "",
            AccountNumber: a.accountNumber ? a.accountNumber.value : "",
            ReferrerURL: location.href,
            UserAgent: navigator.userAgent,
            Version: b
        }, function(i) {
            if ("submitButton" in a) {
                a.submitButton.removeAttribute("disabled")
            }
            if (!i || i.Error > 0) {
                eziDebitErrorMessages.generateError("Ezidebit API Error (" + i.Error + "): " + i.ErrorMessage, c.submitError)
            } else {
                if (c.submitCallback) {
                    c.submitCallback(i)
                }
            }
        }, jsonFailure)
    };
    return {
        init: init,
        getElement: getElement,
        isValidated: d,
        set: setValidated,
        chargeCard: chargeCard,
        saveCustomer: saveCustomer,
        saveCustomerAccount: saveCustomerAccount,
        changeCustomerPaymentInfo: changeCustomerPaymentInfo
    }
}();
var eziDebitErrorMessages = function() {
    genError = function(b, c, a) {
        c(b, a)
    };
    return {
        generateError: genError
    }
}();
var eziDebitValidation = function() {
    performValidation = function(d, a) {
        switch (d) {
            case "SaveCustomerAccount":
                if (validateAccountDetails(a)) {
                    eziDebit.set(true)
                } else {
                    eziDebit.set(false);
                    return false
                }
                break;
            case "ChargeCard":
                if (validateCardDetails(a, true)) {
                    eziDebit.set(true)
                } else {
                    eziDebit.set(false);
                    return false
                }
                break;
            case "SaveCustomer":
                if ("customerLastName" in a) {
                    var c = eziDebit.getElement(a.customerLastName).value;
                    if (c.length < 1) {
                        eziDebitErrorMessages.generateError("No customer last name entered", a.submitError, a.customerLastName);
                        eziDebit.set(false);
                        return false
                    }
                } else {
                    eziDebitErrorMessages.generateError("Customer last name field not found", a.submitError);
                    eziDebit.set(false);
                    return false
                }
                if ("customerPostcode" in a) {
                    var b = eziDebit.getElement(a.customerPostcode).value;
                    if (b.length > 0 && b.length != 4) {
                        eziDebitErrorMessages.generateError("Invalid postcode entered", a.submitError, a.customerPostcode);
                        eziDebit.set(false);
                        return false
                    }
                }
                if ("nameOnCard" in a) {
                    if (eziDebit.getElement(a.cardNumber).value != "" || eziDebit.getElement(a.cardExpiryMonth).value != "" || eziDebit.getElement(a.cardExpiryYear).value != "" || eziDebit.getElement(a.nameOnCard).value != "") {
                        if (validateCardDetails(a, false)) {
                            eziDebit.set(true)
                        } else {
                            eziDebit.set(false);
                            return false
                        }
                    }
                }
                if ("accountName" in a) {
                    if (eziDebit.getElement(a.accountName).value != "" || eziDebit.getElement(a.accountBSB).value != "" || eziDebit.getElement(a.accountNumber).value != "") {
                        if (validateAccountDetails(a)) {
                            eziDebit.set(true)
                        } else {
                            eziDebit.set(false);
                            return false
                        }
                    }
                }
                break;
            case "ChangeCustomerPaymentInfo":
                if ("customerRef" in a && "customerReference" in a) {
                    if (eziDebit.getElement(a.customerRef).value == "" && eziDebit.getElement(a.customerReference).value == "") {
                        eziDebitErrorMessages.generateError("Either customerRef field or customerReference field must have a value specified", a.submitError, a.customerRef);
                        return false
                    }
                } else {
                    if (!("customerRef" in a || "customerReference" in a)) {
                        eziDebitErrorMessages.generateError("Either customerRef field or customerReference field is required", a.submitError, a.customerRef);
                        return false
                    } else {
                        if ("customerRef" in a) {
                            if (eziDebit.getElement(a.customerRef).value == "") {
                                eziDebitErrorMessages.generateError("The customerRef must have a value specified", a.submitError, a.customerRef);
                                return false
                            }
                        } else {
                            if ("customerReference" in a) {
                                if (eziDebit.getElement(a.customerReference).value == "") {
                                    eziDebitErrorMessages.generateError("The customerReference must have a value specified", a.submitError, a.customerRef);
                                    return false
                                }
                            }
                        }
                    }
                }
                if ("accountNumber" in a) {
                    if (eziDebit.getElement(a.accountName).value != "" || eziDebit.getElement(a.accountBSB).value != "" || eziDebit.getElement(a.accountNumber).value != "") {
                        if (validateAccountDetails(a)) {
                            eziDebit.set(true)
                        } else {
                            eziDebit.set(false);
                            return false
                        }
                    } else {
                        eziDebitErrorMessages.generateError("You have not supplied bank account details", a.submitError);
                        return false
                    }
                }
                if ("cardNumber" in a) {
                    if (eziDebit.getElement(a.cardNumber).value != "" || eziDebit.getElement(a.cardExpiryMonth).value != "" || eziDebit.getElement(a.cardExpiryYear).value != "" || eziDebit.getElement(a.nameOnCard).value != "") {
                        if (validateCardDetails(a, false)) {
                            eziDebit.set(true)
                        } else {
                            eziDebit.set(false);
                            return false
                        }
                    } else {
                        eziDebitErrorMessages.generateError("You have not supplied credit card details", a.submitError);
                        return false
                    }
                }
                break
        }
    }, validateAccountDetails = function(c) {
        if ("accountName" in c) {
            var b = eziDebit.getElement(c.accountName).value;
            if (b.length < 2 || b.length > 50) {
                eziDebitErrorMessages.generateError("The account name is invalid", c.submitError, c.accountName);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("Account name field not found", c.submitError);
            eziDebit.set(false);
            return false
        }
        if ("accountBSB" in c) {
            var a = eziDebit.getElement(c.accountBSB).value;
            if (a.length < 6) {
                eziDebitErrorMessages.generateError("The BSB should be 6 digits", c.submitError, c.accountBSB);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("BSB field not found", c.submitError);
            eziDebit.set(false);
            return false
        }
        if ("accountNumber" in c) {
            var d = eziDebit.getElement(c.accountNumber).value;
            if (d.length < 2) {
                eziDebitErrorMessages.generateError("The account number is invalid", c.submitError, c.accountNumber);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("Account number field not found", c.submitError);
            eziDebit.set(false);
            return false
        }
        return true
    }, validateCardDetails = function(b, c) {
        if ("nameOnCard" in b) {
            var g = eziDebit.getElement(b.nameOnCard).value;
            if (g.length < 3 || g.length > 100) {
                eziDebitErrorMessages.generateError("The name on the card appears to be invalid", b.submitError, b.nameOnCard);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("Name on card field not found", b.submitError);
            eziDebit.set(false);
            return false
        }
        if ("cardNumber" in b) {
            var k = eziDebit.getElement(b.cardNumber).value;
            if (k.length < 14) {
                eziDebitErrorMessages.generateError("The card number should be between 14 and 16 digits", b.submitError, b.cardNumber);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("Card number field not found", b.submitError);
            eziDebit.set(false);
            return false
        }
        if ("cardExpiryMonth" in b) {
            var f = eziDebit.getElement(b.cardExpiryMonth).value;
            if (!parseInt(f, 10)) {
                eziDebitErrorMessages.generateError("Month expiry must be a number", b.submitError, b.cardExpiryMonth);
                eziDebit.set(false);
                return false
            }
            if (f.length < 1) {
                eziDebitErrorMessages.generateError("Must enter card month expiry", b.submitError, b.cardExpiryMonth);
                eziDebit.set(false);
                return false
            }
            if (f > 12 || f < 1) {
                eziDebitErrorMessages.generateError("The card month expiry must be between 1 and 12", b.submitError, b.cardExpiryMonth);
                eziDebit.set(false);
                return false
            }
            var e = new Date().getFullYear();
            var h = new Date().getMonth() + 1;
            var j = eziDebit.getElement(b.cardExpiryYear).value;
            if (j == e) {
                if (f < h) {
                    eziDebitErrorMessages.generateError("The card expiry is in the past", b.submitError, b.cardExpiryMonth);
                    eziDebit.set(false);
                    return false
                }
            }
        } else {
            eziDebitErrorMessages.generateError("Card month expiry field not found", b.submitError);
            eziDebit.set(false);
            return false
        }
        if ("cardExpiryYear" in b) {
            var j = eziDebit.getElement(b.cardExpiryYear).value;
            if (!parseInt(j, 10)) {
                eziDebitErrorMessages.generateError("Year expiry must be a 4 digit number", b.submitError, b.cardExpiryYear);
                eziDebit.set(false);
                return false
            }
            if (j.length != 4) {
                eziDebitErrorMessages.generateError("Year expiry must be a 4 digit number", b.submitError, b.cardExpiryYear);
                eziDebit.set(false);
                return false
            }
            var e = new Date().getFullYear();
            if (j < e) {
                eziDebitErrorMessages.generateError("The card year expiry is in the past", b.submitError, b.cardExpiryYear);
                eziDebit.set(false);
                return false
            }
            if (j > e + 20) {
                eziDebitErrorMessages.generateError("The card year expiry is more than 20 years in the future", b.submitError, b.cardExpiryYear);
                eziDebit.set(false);
                return false
            }
        } else {
            eziDebitErrorMessages.generateError("Card month expiry field not found", b.submitError);
            eziDebit.set(false);
            return false
        }
        var a = null;
        if ("paymentAmount" in b) {
            a = eziDebit.getElement(b.paymentAmount).value
        }
        var i = null;
        if ("paymentReference" in b) {
            var i = eziDebit.getElement(b.paymentReference).value
        }
        c = c || ("paymentAmount" in b && a.length >= 1 && parseFloat(a) != 0) || ("paymentReference" in b && i.length >= 1);
        if (c) {
            if ("cardCCV" in b) {
                var d = eziDebit.getElement(b.cardCCV).value;
                var k = eziDebit.getElement(b.cardNumber).value;
                if (k.length != 14) {
                    if (!parseInt(d, 10)) {
                        eziDebitErrorMessages.generateError("CCV must be a 3 or 4 digit number", b.submitError, b.cardCCV);
                        eziDebit.set(false);
                        return false
                    }
                    if (d.length < 1 || d.length < 3 || d.length > 4) {
                        eziDebitErrorMessages.generateError("The CCV number should be either 3 or 4 digits long", b.submitError, b.cardCCV);
                        eziDebit.set(false);
                        return false
                    }
                }
            } else {
                eziDebitErrorMessages.generateError("Card CCV field not found", b.submitError);
                eziDebit.set(false);
                return false
            }
            if ("paymentReference" in b) {
                if (i.length < 1) {
                    eziDebitErrorMessages.generateError("No payment reference entered", b.submitError, b.paymentReference);
                    eziDebit.set(false);
                    return false
                }
            } else {
                eziDebitErrorMessages.generateError("Payment reference field not found", b.submitError);
                eziDebit.set(false);
                return false
            }
            if ("paymentAmount" in b) {
                if (a.length < 1) {
                    eziDebitErrorMessages.generateError("No payment amount entered", b.submitError, b.paymentAmount);
                    eziDebit.set(false);
                    return false
                }
                if (!parseFloat(a)) {
                    eziDebitErrorMessages.generateError("Payment amount invalid", b.submitError, b.paymentAmount);
                    eziDebit.set(false);
                    return false
                }
            } else {
                eziDebitErrorMessages.generateError("Payment amount field not found", b.submitError);
                eziDebit.set(false);
                return false
            }
        }
        return true
    }, entryIsNumber = function(b) {
        var a = (b.which) ? b.which : event.keyCode;
        if (a != 46 && a > 31 && (a < 48 || a > 57)) {
            return false
        }
        return true
    };
    return {
        validate: performValidation,
        validateNumber: entryIsNumber
    }
}();
var eziDebitCCValidator = function() {
    validate = function(h) {
        var a = "0123456789";
        var g = h.length;
        var f = parseInt(h);
        var l = h.toString();
        l = l.replace(/^\s+|\s+$/g, "");
        var k = 0;
        var n = true;
        var b = false;
        var m;
        var d;
        for (var c = 0; c < g; c++) {
            m = "" + l.substring(c, c + 1);
            if (a.indexOf(m) == "-1") {
                n = false
            }
        }
        if (!n) {
            b = false
        }
        if ((g == 0) && (b)) {
            b = false
        } else {
            if (g >= 15) {
                for (var e = g; e > 0; e--) {
                    d = parseInt(f) % 10;
                    d = parseInt(d);
                    k += d;
                    e--;
                    f = f / 10;
                    d = parseInt(f) % 10;
                    d = d * 2;
                    switch (d) {
                        case 10:
                            d = 1;
                            break;
                        case 12:
                            d = 3;
                            break;
                        case 14:
                            d = 5;
                            break;
                        case 16:
                            d = 7;
                            break;
                        case 18:
                            d = 9;
                            break;
                        default:
                            d = d
                    }
                    f = f / 10;
                    k += d
                }
                if ((k % 10) == 0) {
                    b = true
                } else {
                    b = false
                }
            }
        }
        return b
    };
    return {
        validateCard: validate
    }
}();
var JSONP = (function() {
    var a = 0,
        g, f, j, d = this,
        b = {};

    function i(m, o) {
        var l = document.createElement("script"),
            k = false;
        l.src = m;
        l.async = true;
        var n = setTimeout(function() {
            if (!k && o) {
                o()
            }
        }, b.timeout || 10000);
        l.onload = l.onreadystatechange = function() {
            if (!k && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                k = true;
                l.onload = l.onreadystatechange = null;
                if (l && l.parentNode) {
                    l.parentNode.removeChild(l)
                }
            }
        };
        if (!g) {
            g = document.getElementsByTagName("head")[0]
        }
        g.appendChild(l)
    }

    function c(k) {
        return encodeURIComponent(k)
    }

    function h(k, o, p, n, l) {
        f = (k || "").indexOf("?") === -1 ? "?" : "&";
        o = o || {};
        for (j in o) {
            if (o.hasOwnProperty(j)) {
                f += c(j) + "=" + c(o[j]) + "&"
            }
        }
        var m = "json" + (++a);
        d[m] = function(q) {
            p(q);
            try {
                delete d[m]
            } catch (r) {}
            d[m] = null
        };
        i(k + f + (l || b.callbackName || "callback") + "=" + m, n);
        return m
    }

    function e(k) {
        b = k
    }
    return {
        get: h,
        init: e
    }
}());